{"version":3,"sources":["auto-complete/InputElement.jsx"],"names":["InputElement","arguments","saveRef","ele","childRef","props","children","ref","React","cloneElement","Component"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACqBA,Y;;;;;AACjB,0BAAc;AAAA;;AAAA;;AACV,+BAASC,SAAT;;AACA,UAAKC,OAAL,GAAe,UAACC,GAAD,EAAS;AACpB,UAAaC,QAAb,GAA0B,MAAKC,KAAL,CAAWC,QAArC,CAAQC,GAAR;;AACA,UAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAChCA,QAAAA,QAAQ,CAACD,GAAD,CAAR;AACH;AACJ,KALD;;AAFU;AAQb;;;;WACD,kBAAS;AACL,0BAAOK,KAAK,CAACC,YAAN,CAAmB,KAAKJ,KAAL,CAAWC,QAA9B,EAAwC,SAAc,SAAc,EAAd,EAAkB,KAAKD,KAAvB,CAAd,EAA6C;AAAEE,QAAAA,GAAG,EAAE,KAAKL;AAAZ,OAA7C,CAAxC,EAA6G,IAA7G,CAAP;AACH;;;;EAZqCM,KAAK,CAACE,S","sourcesContent":["import * as React from 'react';\nexport default class InputElement extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.saveRef = (ele) => {\n            const { ref: childRef } = this.props.children;\n            if (typeof childRef === 'function') {\n                childRef(ele);\n            }\n        };\n    }\n    render() {\n        return React.cloneElement(this.props.children, Object.assign(Object.assign({}, this.props), { ref: this.saveRef }), null);\n    }\n}\n"],"file":"InputElement.js"}