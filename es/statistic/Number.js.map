{"version":3,"sources":["statistic/Number.jsx"],"names":["React","padEnd","StatisticNumber","props","value","formatter","precision","decimalSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","slice"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,MAAQC,KAAR,GAA0FD,KAA1F,CAAQC,KAAR;AAAA,MAAeC,SAAf,GAA0FF,KAA1F,CAAeE,SAAf;AAAA,MAA0BC,SAA1B,GAA0FH,KAA1F,CAA0BG,SAA1B;AAAA,MAAqCC,gBAArC,GAA0FJ,KAA1F,CAAqCI,gBAArC;AAAA,8BAA0FJ,KAA1F,CAAuDK,cAAvD;AAAA,MAAuDA,cAAvD,sCAAwE,EAAxE;AAAA,MAA4EC,SAA5E,GAA0FN,KAA1F,CAA4EM,SAA5E;AACA,MAAIC,SAAJ;;AACA,MAAI,OAAOL,SAAP,KAAqB,UAAzB,EAAqC;AACjC;AACAK,IAAAA,SAAS,GAAGL,SAAS,CAACD,KAAD,CAArB;AACH,GAHD,MAIK;AACD;AACA,QAAMO,GAAG,GAAGC,MAAM,CAACR,KAAD,CAAlB;AACA,QAAMS,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,uBAAV,CAAd,CAHC,CAID;;AACA,QAAI,CAACD,KAAL,EAAY;AACRH,MAAAA,SAAS,GAAGC,GAAZ;AACH,KAFD,MAGK;AACD,UAAMI,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;;AACA,UAAIG,IAAG,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;;AACA,UAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACAG,MAAAA,IAAG,GAAGA,IAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCV,cAArC,CAAN;;AACA,UAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AAC/BW,QAAAA,OAAO,GAAGhB,MAAM,CAACgB,OAAD,EAAUX,SAAV,EAAqB,GAArB,CAAN,CAAgCa,KAAhC,CAAsC,CAAtC,EAAyCb,SAAzC,CAAV;AACH;;AACD,UAAIW,OAAJ,EAAa;AACTA,QAAAA,OAAO,aAAMV,gBAAN,SAAyBU,OAAzB,CAAP;AACH;;AACDP,MAAAA,SAAS,GAAG,cACR;AAAM,QAAA,GAAG,EAAC,KAAV;AAAgB,QAAA,SAAS,YAAKD,SAAL;AAAzB,SACLM,QADK,EAELC,IAFK,CADQ,EAKRC,OAAO,iBAAK;AAAM,QAAA,GAAG,EAAC,SAAV;AAAoB,QAAA,SAAS,YAAKR,SAAL;AAA7B,SACfQ,OADe,CALJ,CAAZ;AASH;AACJ;;AACD,sBAAO;AAAM,IAAA,SAAS,YAAKR,SAAL;AAAf,KAAgDC,SAAhD,CAAP;AACH,CAtCD;;AAuCA,eAAeR,eAAf","sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nconst StatisticNumber = props => {\n    const { value, formatter, precision, decimalSeparator, groupSeparator = '', prefixCls } = props;\n    let valueNode;\n    if (typeof formatter === 'function') {\n        // Customize formatter\n        valueNode = formatter(value);\n    }\n    else {\n        // Internal formatter\n        const val = String(value);\n        const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n        // Process if illegal number\n        if (!cells) {\n            valueNode = val;\n        }\n        else {\n            const negative = cells[1];\n            let int = cells[2] || '0';\n            let decimal = cells[4] || '';\n            int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n            if (typeof precision === 'number') {\n                decimal = padEnd(decimal, precision, '0').slice(0, precision);\n            }\n            if (decimal) {\n                decimal = `${decimalSeparator}${decimal}`;\n            }\n            valueNode = [\n                <span key=\"int\" className={`${prefixCls}-content-value-int`}>\n          {negative}\n          {int}\n        </span>,\n                decimal && (<span key=\"decimal\" className={`${prefixCls}-content-value-decimal`}>\n            {decimal}\n          </span>),\n            ];\n        }\n    }\n    return <span className={`${prefixCls}-content-value`}>{valueNode}</span>;\n};\nexport default StatisticNumber;\n"],"file":"Number.js"}